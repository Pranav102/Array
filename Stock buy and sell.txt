// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main (String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
        while(t-->0){
            int n = Integer.parseInt(br.readLine().trim());
            int A[] = new int[n];
            String inputLine[] = br.readLine().trim().split(" ");
            for(int i=0; i<n; i++){
                A[i] = Integer.parseInt(inputLine[i]);
            }
            Solution obj = new Solution();
            ArrayList<ArrayList<Integer> > ans = obj.stockBuySell(A, n);
            if(ans.size()==0)
                System.out.print("No Profit");
            else{
                for (int i=0; i<ans.size(); ++i){
                    System.out.print("("+ans.get(i).get(0)+" "+ans.get(i).get(1)+") ");
                }
            }System.out.println();
        }
    }
}// } Driver Code Ends


//User function Template for Java
class Interval {
	int buy, sell;
}
class Solution{
    ArrayList<ArrayList<Integer> > stockBuySell(int A[], int n) {
    
         ArrayList<ArrayList<Integer> > result = new ArrayList<ArrayList<Integer> >();
        
        if(n==1){
            return result;
        }
        
        ArrayList<Interval> sol = new ArrayList<Interval>();
        int i=0, cnt=0;
       
       
       
        while (i < n-1) {
            // Find Local Minima. Note that the limit is (n-2) as we are
            // comparing present element to the next element.
            while ((i < n-1) && (A[i+1] <= A[i])){
                i++;
            }
            // If we reached the end, break as no further solution possible
            if (i == n-1){
                break;
            }
            Interval e = new Interval();
            e.buy = i++;
 
            // Find Local Maxima.  Note that the limit is (n-1) as we are
            // comparing to previous element
            while ((i < n) && (A[i] >= A[i-1]))
                i++;
 
            // Store the index of maxima
            e.sell = i-1;
            sol.add(e);
            // Increment count of buy/sell pairs
            cnt++;
        }
        
        
        
        
        
        
        
        if(cnt==0){
            return result;
        } else {
            for(int j=0; j<sol.size(); j++){
                result.add(new ArrayList<Integer>()); 
                result.get(j).add(0, sol.get(j).buy);
                result.get(j).add(1, sol.get(j).sell);
            }
        }
        return result;
    }
    
}